*** Begin Patch
*** Add File: css/styles.css
+/* Minimal fallback styles */
+body{font-family:Helvetica,Arial,sans-serif;color:#222;margin:0;padding:0}
+.container{max-width:980px;margin:0 auto;padding:1rem}
+.site-header{background:#f8f8f8;border-bottom:1px solid #eaeaea}
+.brand{display:flex;align-items:center;gap:1rem}
+.logo{width:72px;height:auto}
+.primary-nav ul{list-style:none;margin:0;padding:0;display:flex;gap:1rem}
+.btn{background:#007acc;color:#fff;padding:.5rem 1rem;border-radius:4px;text-decoration:none}
+
*** End Patch
*** Begin Patch
*** Add File: assets/favicon.svg
+<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64'><rect width='100%' height='100%' fill='#007acc'/><text x='50%' y='50%' font-size='28' fill='#fff' text-anchor='middle' dominant-baseline='central'>B</text></svg>
+
*** End Patch
*** Begin Patch
*** Add File: sitemap.xml
+<?xml version="1.0" encoding="UTF-8"?>
+<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
+  <url>
+    <loc>https://bitargroup.github.io/</loc>
+    <changefreq>monthly</changefreq>
+    <priority>0.8</priority>
+  </url>
+</urlset>
+
*** End Patch
*** Begin Patch
*** Add File: cv/placeholder.png
+iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=
+
*** End Patch
*** Begin Patch
*** Add File: cv/12.png
+iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=
+
*** End Patch
*** Begin Patch
*** Add File: cv/14.png
+iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=
+
*** End Patch
*** Begin Patch
*** Add File: cv/15.png
+iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=
+
*** End Patch
*** Begin Patch
*** Add File: cv/18.png
+iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=
+
*** End Patch
*** Begin Patch
*** Add File: cv/1.png
+iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR4nGNgYAAAAAMAASsJTYQAAAAASUVORK5CYII=
+
*** End Patch
*** Begin Patch
*** Add File: README.md
+This repository contains a simple static site for BitarGroup.
+
+Developer notes:
+- Run quick site checks locally (PowerShell):
+  - `powershell -NoProfile -ExecutionPolicy Bypass -File .\tools\site_test.ps1 -Path index.html`
+- Convert images locally (PowerShell):
+  - `powershell -NoProfile -ExecutionPolicy Bypass -File .\tools\convert_images.ps1`
+
+CI workflows:
+- `.github/workflows/site-tests.yml` runs quick HTML checks on push/PR
+- `.github/workflows/convert-images.yml` can convert JPG files in `cv/` to PNG and commit the results (manual dispatch or on push)
+
+Placeholders: small placeholder PNGs were added under `cv/` to avoid broken image links. Replace them with real optimized images when available.
+
*** End Patch
*** Begin Patch
*** Add File: tools/site_test.py
+#!/usr/bin/env python3
+"""
+Simple site tests for a static HTML file.
+
+Checks performed:
+- <title> exists and non-empty
+- meta viewport present
+- <html> has lang attribute
+- <link rel="canonical"> present
+- all <img> tags have non-empty alt attributes
+- internal anchor hrefs (href="#id") point to existing id attributes
+
+Usage: python tools\site_test.py [path/to/index.html]
+"""
+import re
+import sys
+from pathlib import Path
+
+
+def load_file(path: Path) -> str:
+    try:
+        return path.read_text(encoding='utf-8')
+    except Exception as e:
+        print(f"ERROR: Could not read {path}: {e}")
+        sys.exit(2)
+
+
+def find_tag(regex, text):
+    return re.search(regex, text, re.I | re.S)
+
+
+def find_all(regex, text):
+    return re.findall(regex, text, re.I | re.S)
+
+
+def main():
+    p = Path(sys.argv[1]) if len(sys.argv) > 1 else Path(__file__).parent.parent / 'index.html'
+    if not p.exists():
+        print(f"ERROR: File not found: {p}")
+        sys.exit(2)
+
+    text = load_file(p)
+    failures = []
+
+    # Title
+    title_m = find_tag(r'<title\s*>(.*?)</title>', text)
+    if not title_m or not title_m.group(1).strip():
+        failures.append('Missing or empty <title>')
+    else:
+        print(f"Title: {title_m.group(1).strip()}")
+
+    # Meta viewport
+    if not find_tag(r'<meta[^>]+name=[\"\']viewport[\"\']', text):
+        failures.append('Missing meta viewport')
+
+    # html lang
+    html_lang = find_tag(r'<html[^>]+lang=[\"\']([^\"\']+)[\"\']', text)
+    if not html_lang:
+        failures.append('Missing lang attribute on <html>')
+    else:
+        print(f"HTML lang: {html_lang.group(1)}")
+
+    # canonical
+    if not find_tag(r'<link[^>]+rel=[\"\']canonical[\"\']', text):
+        failures.append('Missing <link rel="canonical">')
+
+    # Images alt
+    img_tags = find_all(r'<img\b[^>]*>', text)
+    img_no_alt = []
+    img_empty_alt = []
+    for img in img_tags:
+        alt_m = re.search(r'alt\s*=\s*([